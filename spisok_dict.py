from prettytable import PrettyTable
import copy
itog = {}
mis = ['-' * 30, 'Что-то пошло не так. Некорректные данные. Введите еще раз.', '-' * 30]  # шаблон вывода ОШИБКИ


def is_number(st):  # Проверка на число
    try:
        float(st)
        return True
    except ValueError:
        return False


def is_int(s):  # Проверка на целое число
    try:
        int(s)
        return True
    except ValueError:
        return False


def pokupki():  # Функция для заполнения списка и продолжения заполнения
    spisok = ''
    global itog
    global vvod
    summa = 0
    while spisok not in [['Итог'], ['итог']]:  # Пока введено не "ИТОГ" продолжаем работу
        spisok = input('''Введите наименование товара, количество и цену ЧЕРЕЗ ПРОБЕЛ.
Если, наименование : Банан, количество: 3 шт., цена: 24 руб., то пример ввода :Банан 3 24.
В случае, если наименовение весовое: Картошка, 3.4 кг 43 руб., то пример ввода :Картошка 3.4 43.
!!! В случае весового наименование, ВЕС ВВОДИТЬ С "." !!!
Введите "Итог" для вывода списка Ваших покупок:''').split()  # Получаем наименование, кол-во и цену

        temp = [i for i in itog]  # временный список со всеми товарами для поиска дубликатов
        # В случае, если пользователь ввел число с ",", а не с "." -> Находим это число, и меняем "," на "."
        a = [spisok.index(i) for i in spisok if ',' in i]  # если "," в spisok, получаем индекс значения с ','
        # for i in spisok:
        #   if ',' in i:
        #       a = spisok.index(i) получили индекс значения с ','
        if a:  # Если список не пустой (Если число с "," есть)
            spisok[a[0]] = spisok[a[0]].replace(',', '.')  # меняем ',' на '.'

        # Проверяем корректность введеных пользователем данных
        if len(spisok) == 3 and is_number(spisok[1]) and is_number(spisok[2]) or spisok in [['Итог'], ['итог']]:
            # Если длина списка 3 и (кол- во и цена - числа) или введен "ИТОГ":
            if spisok in [['Итог'], ['итог']]:  # Если пользов. ввел "ИТОГ", останавливаем цикл и выводим список
                break
            if not itog:  # Если itog пустой, добавляем spisok (то, что ввел пользователь)
                itog.setdefault(spisok[0], spisok[1:])
            else:  # Если itog не пустой
                if spisok[0] in temp:  # Если наименование уже есть в списке
                    itog[spisok[0]][0] = int(itog[spisok[0]][0]) + int(spisok[1])  # Добавляем количество к наименованию
                else:
                    itog.setdefault(spisok[0], spisok[1:])  # Если наименования нет в списке, то просто добавляем его
        else:  # Если введеное значение не верное, то выводим ошибку и просим ввести товар еще раз
            print(*mis, sep='\n')

    vvod = PrettyTable(['№', 'Наименование', 'Количество', 'Цена', 'Сумма'])

    itogg = copy.deepcopy(itog)  # Делаем глубокую копию основного списка покупок, чтобы не изменять его
    vvod.clear_rows()  # очищаем ввод для внесения данных после изменения
    a = 0  # Счетчик строк
    for i in itogg.items():  # пример i - ('Банан', ['3', '2'])
        a += 1  # Счетчик строк
        i[1].append(round(float(i[1][0]) * float(i[1][1]), 2))  # Сумма товара (кол-во * цену). i[1][0] = 3, i[1][0] = 2
        summa += i[1][2]  # Итоговая сумма (Складываем сумму по каждой позиции)
        if not is_int(i[1][0]):  # Если кол-во НЕ целое число, то будет КГ., если целое, то ШТ.
            i[1][0] = str(round(float(i[1][0]), 2)) + ' кг.'
        else:
            i[1][0] = str(i[1][0]) + ' шт.'
        i[1][1] = str(i[1][1]) + ' руб.'  # добавляем приписку ".руб" к цене за шт.
        i[1][2] = str(i[1][2]) + ' руб.'  # добавляем приписку ".руб" к сумме каждой позиции
        vvod.add_row([a, i[0], *i[1]])  # Добавляем готовую строку в итоговый список

    print(vvod)  # Выводим список
    print(PrettyTable(['Итого: ' + str(round(summa, 2)) + ' Руб.']))  # Выводим итоговую сумму по всем позициям

pokupki()